[
  {
    "name": "No decisions at the keyboard",
    "aka": "More listening at the keyboard",
    "symptoms": [
      "Typist is talking as much or more than the navigator",
      "Navigator is quiet or uncertain",
      "Typist writes code that the navigator didn’t talk about"
    ],
    "proposal": "The typist is not supposed to have their own ideas, they should be channeling the ideas from the navigator and the rest of the ensemble into the codebase.\n\n\"For an idea to go from your head into the computer it MUST go through someone else's hands\"\n\nThat’s Llewellyn Falco’s description of “strong-style” pair programming. For an ensemble, this is even more important. Every idea should be spoken: expressed in a form so that it can be discussed and analyzed as it makes its way into the code. The typist has the hardest job here, because they have to break their habit of both thinking and typing themselves. Instead they need to put more effort into listening - in particular to the navigator, and translating their ideas into code.\n\nIf you notice the typist is rushing ahead writing code for an idea that hasn’t been discussed, you should probably intervene straight away. Kindly suggest “more listening, less thinking at the keyboard”. Perhaps also bring it up at the retrospective.\n"
  },
  {
    "name": "Intention-location-details (ILD)",
    "symptoms": [
      "Typist is frustrated or inactive. Deleting stuff, scrolling, or writing unexpected code",
      "Difficulty when switching navigator - next navigator doesn’t follow what’s happening",
      "Ensemble is losing focus (eg checking their phones)"
    ],
    "proposal": "The communication between the navigator and typist is not working well enough, the navigator is not speaking at the correct level for the driver’s current needs.\n\n* *Intention*: Explain at a high level what you’re trying to achieve, and what problem it is you’re working on. Always begin with this.\n* *Location*: If the typist needs more before they know what to do, then describe where you want them to do something. Which file, function, line? Which part of the screen? Which tool should they use?\n* *Details*: If the typist still needs more, go into detail. Describe the exact syntax, the types of the variables, where to put the semicolons. Which buttons to press and what keyboard shortcuts to use.\n\nThis enabler should help prevent the typist from becoming frustrated. You’re treating them first as an intelligent person who knows a lot about coding, and gradually giving them more as you discover what more details they need right now given the cognitive complexity of the task and their current capacity. It also helps the handover to the next navigator because the intention and purpose is clear and has been spoken to everyone.\n"
  }
]