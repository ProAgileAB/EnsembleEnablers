[
  {
    "name": "No decisions at the keyboard",
    "aka": "More listening at the keyboard",
    "symptoms": [
      "Typist is talking as much or more than the navigator",
      "Navigator is quiet or uncertain",
      "Typist writes code that the navigator didn't talk about"
    ]
  },
  {
    "name": "Intention-location-details",
    "symptoms": [
      "Typist is frustrated or inactive. Deleting stuff, scrolling, or writing unexpected code",
      "Difficulty when switching navigator - next navigator doesn't follow what's happening",
      "Ensemble is losing focus (e.g checking their phones)"
    ]
  },
  {
    "name": "Connect first",
    "symptoms": [
      "Ensemble is quiet, no banter",
      "Navigator transfer is not smooth, frequently changing direction and focus",
      "Conversation seems forced"
    ]
  },
  {
    "name": "Finger in the air",
    "symptoms": [
      "Navigator is interrupted by rest of ensemble",
      "Typist does not know who to listen to",
      "\"Flow\" is not happening"
    ]
  },
  {
    "name": "Kindness, consideration and respect",
    "symptoms": [
      "Conflict",
      "Big egos getting in the way, little code being written",
      "Not listening to one another"
    ],
    "proposal": "This is a basic, fundamental ground rule for this way of working:\n\nWe treat everyone with kindness, consideration and respect\n\nEven if you've had a rough day, or you find someone annoying, or there are several other\nthings you'd rather be doing, you have to stick to a basic level of decency towards the\npeople you are working with. If you feel someone is out of order, remind them gently that this\nis how they agreed to behave in the ensemble. Suggest they could take a break if they need\nto and come back when they're ready to do that."
  },
  {
    "name": "Collaborative ensemble timer setup",
    "symptoms": [
      "Discover someone is missing from the rotations",
      "Discover someone is absent from the meeting but present in the timer",
      "Realize the timer has not alerted you to rotate as often as you expected"
    ]
  },
  {
    "name": "Bias to action",
    "symptoms": [
      "Discussions go on for more than (say) 20 minutes without code being written",
      "Every time the navigator makes a design decision, someone else wants to correct or improve something about it before they have get any code written",
      "Team is stuck in 'analysis-paralysis' with a lot of speculation on which approach to take"
    ]
  },
  {
    "name": "Parallell research",
    "symptoms": [
      "Nobody in the team knows the details of how to do something well enough to explain it to the typist",
      "The team is working with an unfamiliar programming language or framework and just gets stuck",
      "The codebase is huge and no-one in the team is knowledgeable about where to make changes for current user story"
    ]
  },
  {
    "name": "Invite an expert",
    "symptoms": [
      "The team keeps referring to another team (or member of another team)",
      "Parallell research has been tried several times and not much progress made",
      "Team is struggling with making progress due to lack of experience"
    ]
  },
  {
    "name": "Typist recap",
    "symptoms": [
      "When the navigator rotates, the next navigator has trouble picking up the direction",
      "Lots of discussion, not much progress",
      "Each navigator seems to take a different direction from the previous one"
    ]
  },
  {
    "name": "Try both with a timebox",
    "symptoms": [
      "Despite (say) 20 minutes of discussion, the team is not agreed on an approach",
      "Two or more people are trying to persuade the ensemble that their design approach is the right one"
    ],
    "proposal": "As a coach it might be tempting to just tell them which approach is best and to get on with it.\nThat's pretty arrogant and clearly not a long-term solution! Woody Zuill has a general rule\nthat you should \"try both\" or \"try everything\", but with the proviso that you set a time limit for\neach one. Make sure you have a commit you can return to easily, then begin coding one of\nthe suggestions. Stash or revert the code when the time is up, and instead begin coding the\nnext suggestion. When all options have been looked at, the team decides which one to\npursue."
  },
  {
    "name": "Pause the timer",
    "symptoms": [
      "One or two people are dominating",
      "Dissenting opinions and ideas are being ignored, or override each other",
      "A suggestion is repeatedly raised without ever being discussed properly"
    ]
  },
  {
    "name": "Shout out roles",
    "symptoms": [
      "When the navigator rotates, they are unprepared (comes as a surprise)",
      "Someone notices the timer ran out some time ago and we forgot to rotate",
      "Little engagement, people are losing focus and attention"
    ]
  },
  {
    "name": "Join at will",
    "symptoms": [
      "People seem stressed, particularly when they take over the navigator role",
      "There is a new or shy member of the team, that hasn't done any ensemble programming before",
      "Someone missed the previous session and asks to skip navigation when it's their turn",
      "People you expected to be there don't turn up to the session at all"
    ]
  },
  {
    "name": "Goal list to commit messages",
    "symptoms": [
      "Infrequent commits",
      "Difficulty composing good commit messages",
      "The goal list is out of sync with what you're working on"
    ],
    "proposal": "When you work in an ensemble you often have a shared goal list written in a README file in\nthe repo. (You might call it a test list or a todo list.) Whenever the tests are green, or in fact\nwhenever you think you've made progress towards something on the list, you should\nconsider making a commit in VCS. In many cases you can base your commit message on\nthe goal list item you're currently working on. If you can't use this text in your commit\nmessage then that could be useful feedback to you that your goal list items are not reflecting\nwhat you're actually working on. Take the chance to review your list and update it."
  },
  {
    "name": "I think Sue has a good idea",
    "symptoms": [
      "Someone mentions a new idea that nobody picks up on at the time",
      "Someone is generally quiet and used to being overlooked",
      "You know someone has specialist knowledge about the current issue, but they arenot speaking"
    ],
    "proposal": "We're interested in the best ideas making it into the code. If someone has mentioned\nsomething that could be useful, but perhaps they said it too quietly or at an inopportune\nmoment, take the chance to encourage them to speak again at a better time, in a louder\nvoice.\n\nIt should be as simple as asking them to repeat what they said, or to share their thoughts\nabout a particular issue. Give them your support and encouragement, don't just take over\ntheir idea and say it yourself."
  },
  {
    "name": "Yes, and...",
    "symptoms": [
      "The new navigator starts undoing changes that the previous navigator made",
      "The new navigator ignores the previous direction and pursues a different one",
      "Someone comments that they can't wait until it's their turn to navigate because then\nwe'll start doing something useful"
    ],
    "proposal": "In improvisational theater, they have this rule. Say \"yes, and...\" to your fellow actors while\nyou perform together. It means you should accept whatever they give you, and build on it. If\nthe actors instead say \"No, but...\" and start in another direction entirely, it breaks the group\nflow - the actors know it will be a better performance if they support one another.\n\nThis is the kind of spirit we want to cultivate in the ensemble. Do not delete or undo what the\nprevious navigators did before you. Refactor but do not rewrite. Say â€˜Yes, and' to whatever\nyour colleagues give you."
  },
  {
    "name": "Cross team ensemble",
    "aka": "What You Bring Is What You Solve (WYBIWYS)",
    "symptoms": [],
    "proposal": ""
  }
]
